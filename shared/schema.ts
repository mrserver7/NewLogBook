import { z } from 'zod';

/**
 * This module defines plain TypeScript interfaces and Zod schemas for the
 * domain models used throughout the application.  The original project
 * used Drizzle ORM to define PostgreSQL tables and then derived insert
 * schemas from those definitions.  Since the application now uses
 * MongoDB exclusively, the database table definitions have been
 * removed.  Instead we describe the shape of each document as
 * TypeScript interfaces and provide corresponding Zod schemas for
 * validating request payloads.
 */

/* ------------------------------------------------------------------ */
/*                             User types                             */
/* ------------------------------------------------------------------ */

/**
 * Schema used when creating or updating a user (the original code
 * referred to this as an "upsert" since it inserts or updates based on
 * the user's id).  Only the `id` field is required; all other fields
 * are optional because partial updates are allowed.  Certain fields
 * such as `createdAt` and `updatedAt` are managed by the backend and
 * therefore omitted from the insert schema.
 */
export const insertUserSchema = z.object({
  id: z.string(),
  email: z.string().email().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  profileImageUrl: z.string().optional(),
  role: z.string().optional(),
  specialty: z.string().optional(),
  licenseNumber: z.string().optional(),
  institution: z.string().optional(),
  isActive: z.boolean().optional(),
  themePreference: z.string().optional(),
});

/**
 * Type used by the storage layer for user upserts.  It is derived
 * directly from the insert schema.
 */
export type UpsertUser = z.infer<typeof insertUserSchema>;

/**
 * Full representation of a user stored in the database.  This extends
 * the insert type with server‑managed fields such as timestamps.  The
 * `id` here corresponds to the original table's primary key and is a
 * string to allow UUIDs or other identifiers.
 */
export interface User extends UpsertUser {
  createdAt?: Date;
  updatedAt?: Date;
}

/* ------------------------------------------------------------------ */
/*                            Patient types                           */
/* ------------------------------------------------------------------ */

/**
 * Schema for creating a patient.  The `patientId` is a human‑readable
 * identifier generated by the client (e.g. a nanoid).  All other
 * demographic and medical fields are optional to allow quick case
 * entry.  The `createdBy` field refers to the user id of the creator.
 */
export const insertPatientSchema = z.object({
  patientId: z.string(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  age: z.number().int().optional(),
  gender: z.string().optional(),
  weight: z.number().optional(),
  height: z.number().optional(),
  bmi: z.number().optional(),
  allergies: z.string().optional(),
  medicalHistory: z.string().optional(),
  createdBy: z.string(),
});

export type InsertPatient = z.infer<typeof insertPatientSchema>;

/**
 * Full patient record persisted in the database.  A numeric `id` is
 * assigned on creation.  Timestamps are added by the storage layer.
 */
export interface Patient extends InsertPatient {
  id: number;
  createdAt?: Date;
  updatedAt?: Date;
}

/* ------------------------------------------------------------------ */
/*                            Surgeon types                           */
/* ------------------------------------------------------------------ */

/**
 * Schema for creating a surgeon.  Only the first and last names are
 * required; other fields are optional.  The `createdBy` field
 * associates the surgeon record with a particular user.
 */
export const insertSurgeonSchema = z.object({
  firstName: z.string(),
  lastName: z.string(),
  specialty: z.string().optional(),
  institution: z.string().optional(),
  email: z.string().email().optional(),
  phone: z.string().optional(),
  createdBy: z.string(),
});

export type InsertSurgeon = z.infer<typeof insertSurgeonSchema>;

export interface Surgeon extends InsertSurgeon {
  id: number;
  createdAt?: Date;
}

/* ------------------------------------------------------------------ */
/*                           Procedure types                          */
/* ------------------------------------------------------------------ */

/**
 * Schema for creating a medical procedure.  Only the name is required;
 * other details can be supplied as needed.  This schema mirrors the
 * original table but omits the auto‑incrementing id and timestamps.
 */
export const insertProcedureSchema = z.object({
  name: z.string(),
  category: z.string().optional(),
  description: z.string().optional(),
  duration: z.number().int().optional(),
  complexity: z.string().optional(),
});

export type InsertProcedure = z.infer<typeof insertProcedureSchema>;

export interface Procedure extends InsertProcedure {
  id: number;
  createdAt?: Date;
}

/* ------------------------------------------------------------------ */
/*                              Case types                            */
/* ------------------------------------------------------------------ */

/**
 * Schema for creating a case.  The original table contained many
 * fields; here we include the most important ones.  The `caseNumber`
 * can be provided by the client or left blank, in which case the
 * storage layer will generate a unique identifier.  Many fields are
 * optional to support gradual data entry.  Date fields are accepted as
 * strings in ISO format or as Date instances and will be converted to
 * Date objects by the storage layer.
 */
export const insertCaseSchema = z.object({
  caseNumber: z.string().optional(),
  patientId: z.string().nullable().optional(),
  patientName: z.string().optional(),
  surgeonName: z.string().optional(),
  procedureId: z.number().nullable().optional(),
  customProcedureName: z.string().nullable().optional(),
  procedureCategory: z.string().nullable().optional(),
  anesthesiologistId: z.string(),
  supervisorId: z.string().optional(),
  anesthesiaType: z.string(),
  regionalBlockType: z.string().nullable().optional(),
  customRegionalBlock: z.string().nullable().optional(),
  asaScore: z.string().optional(),
  emergencyCase: z.boolean().optional(),
  caseDate: z.union([z.string(), z.date()]),
  caseDuration: z.string().optional(),
  diagnosis: z.string().optional(),
  complications: z.string().optional(),
  medications: z.any().optional(),
  inductionMedications: z.string().optional(),
  maintenanceMedications: z.string().optional(),
  postOpMedications: z.string().optional(),
  techniques: z.any().optional(),
  monitoring: z.any().optional(),
  notes: z.string().optional(),
  status: z.string().optional(),
  // Additional optional fields inherited from the previous schema
  weight: z.number().nullable().optional(),
  height: z.number().nullable().optional(),
  startTime: z.date().nullable().optional(),
  endTime: z.date().nullable().optional(),
  inductionTime: z.date().nullable().optional(),
  incisionTime: z.date().nullable().optional(),
  emergenceTime: z.date().nullable().optional(),
});

export type InsertCase = z.infer<typeof insertCaseSchema>;

export interface Case extends InsertCase {
  id: number;
  createdAt?: Date;
  updatedAt?: Date;
}

/* ------------------------------------------------------------------ */
/*                        Case Template types                         */
/* ------------------------------------------------------------------ */

/**
 * Schema for creating a case template.  Only the name is required; all
 * other fields are optional.  Templates may be created by users or
 * marked as public.
 */
export const insertCaseTemplateSchema = z.object({
  name: z.string(),
  category: z.string().optional(),
  procedureType: z.string().optional(),
  anesthesiaType: z.string().optional(),
  defaultSettings: z.any().optional(),
  createdBy: z.string().optional(),
  isPublic: z.boolean().optional(),
});

export type InsertCaseTemplate = z.infer<typeof insertCaseTemplateSchema>;

export interface CaseTemplate extends InsertCaseTemplate {
  id: number;
  createdAt?: Date;
}

/* ------------------------------------------------------------------ */
/*                          Case Photo types                          */
/* ------------------------------------------------------------------ */

/**
 * Schema for creating a case photo record.  The `caseId` is numeric
 * and corresponds to the id of a case document.  Only the fileName is
 * required.  Other metadata fields are optional.
 */
export const insertCasePhotoSchema = z.object({
  caseId: z.number().optional(),
  fileName: z.string(),
  originalName: z.string().optional(),
  mimeType: z.string().optional(),
  size: z.number().optional(),
  description: z.string().optional(),
  uploadedBy: z.string().optional(),
});

export type InsertCasePhoto = z.infer<typeof insertCasePhotoSchema>;

export interface CasePhoto extends InsertCasePhoto {
  id: number;
  createdAt?: Date;
}

/* ------------------------------------------------------------------ */
/*                      User Preferences types                        */
/* ------------------------------------------------------------------ */

/**
 * Schema for creating or updating a user's preference document.
 * Preferences are stored separately from the user record to allow
 * flexible extension without modifying the user schema.  Only the
 * `userId` field is required.
 */
export const insertUserPreferencesSchema = z.object({
  userId: z.string(),
  defaultAnesthesiaType: z.string().optional(),
  defaultInstitution: z.string().optional(),
  exportSettings: z.any().optional(),
  dashboardSettings: z.any().optional(),
  notificationSettings: z.any().optional(),
});

export type InsertUserPreferences = z.infer<typeof insertUserPreferencesSchema>;

export interface UserPreferences extends InsertUserPreferences {
  id: number;
  createdAt?: Date;
  updatedAt?: Date;
}

/* ------------------------------------------------------------------ */
/*                         Backwards exports                          */
/* ------------------------------------------------------------------ */

// The rest of the codebase imports the model names directly from this
// module (e.g. `import { users } from "@shared/schema"`).  To
// prevent breaking those imports, we export stub objects with the
// expected property names.  These stubs do not perform any database
// operations; they simply exist to satisfy imports and type
// references left over from the original PostgreSQL implementation.

export const users = {} as any;
export const patients = {} as any;
export const surgeons = {} as any;
export const procedures = {} as any;
export const cases = {} as any;
export const caseTemplates = {} as any;
export const casePhotos = {} as any;
export const userPreferences = {} as any;
